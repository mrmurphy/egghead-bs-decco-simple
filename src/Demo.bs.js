// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Decco = require("decco/src/Decco.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Async$AsyncAwait = require("./Async.bs.js");
var Swapi$AsyncAwait = require("./Swapi.bs.js");

function person_encode(v) {
  return Js_dict.fromArray(/* array */[/* tuple */[
                "firstName",
                Decco.stringToJson(v.firstName)
              ]]);
}

function person_decode(v) {
  var match = Js_json.classify(v);
  if (typeof match === "number" || match.tag !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  } else {
    var match$1 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(match[0], "firstName"), null));
    if (match$1.tag) {
      var e = match$1[0];
      return /* Error */Block.__(1, [{
                  path: ".firstName" + e.path,
                  message: e.message,
                  value: e.value
                }]);
    } else {
      return /* Ok */Block.__(0, [{
                  firstName: match$1[0]
                }]);
    }
  }
}

function go(param) {
  console.log("Here's some JSON of a person");
  return Async$AsyncAwait.let_(Swapi$AsyncAwait.getPerson(/* () */0), (function (json) {
                var result = person_decode(json);
                if (result.tag) {
                  console.log("Our decoding failed", result[0]);
                } else {
                  console.log("Here is the name", result[0].firstName);
                }
                return Async$AsyncAwait.resolve(/* () */0);
              }));
}

go(/* () */0);

exports.person_encode = person_encode;
exports.person_decode = person_decode;
exports.go = go;
/*  Not a pure module */
